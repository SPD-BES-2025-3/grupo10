@startuml
!theme vibrant
!include <C4/C4_Container>
!include <C4/C4_Component>

title "Diagrama de Componentes (C4 - Nível 3) - Layout Organizado"

System_Boundary(SEM, "SISTEMA DE ESTOQUE E FROTA DE MAQUINÁRIOS") {
    
    Container(SPA, "Aplicação Web", "Next.js / React", "Interface do usuário interativa que permite o gerenciamento completo do sistema.")

    Container_Boundary(API, "API RESTful") {
        ' Componentes que interagem com o banco de dados relacional
        Component(MaquinarioController, "MaquinarioController", "Node.js / Express", "Gerencia o CRUD dos dados cadastrais dos maquinários.")
        Component(ResponsavelController, "ResponsavelController", "Node.js / Express", "Gerencia o CRUD de funcionários responsáveis.")
        Component(EstoqueController, "EstoqueController", "Node.js / Express", "Gerencia o CRUD de itens e peças no estoque.")
        
        ' Componente que interage com o banco de dados NoSQL
        Component(ManutencaoController, "ManutencaoController", "Node.js / Express", "Gerencia o histórico e o agendamento de manutenções.")
    }

    ContainerDb(PostgreSQL, "Banco de Dados Relacional", "PostgreSQL", "Armazena dados estruturados (Maquinários, Responsáveis, Itens).")
    ContainerDb(MongoDB, "Banco de Dados NoSQL", "MongoDB", "Armazena dados flexíveis (Registros de Manutenção).")
}

' Relacionamento principal, de cima para baixo
Rel_D(SPA, API, "Faz requisições à API", "HTTP/JSON")

' Relacionamentos dos componentes com os bancos de dados, forçando a direção para baixo
Rel_Down(MaquinarioController, PostgreSQL, "Lê/Escreve em", "ORM (Prisma/TypeORM)")
Rel_Down(ResponsavelController, PostgreSQL, "Lê/Escreve em", "ORM (Prisma/TypeORM)")
Rel_Down(EstoqueController, PostgreSQL, "Lê/Escreve em", "ORM (Prisma/TypeORM)")
Rel_Down(ManutencaoController, MongoDB, "Lê/Escreve em", "ODM (Mongoose)")

' Relação interna entre componentes, forçando a direção para a direita
Rel_Right(MaquinarioController, ManutencaoController, "Consulta histórico")

@enduml